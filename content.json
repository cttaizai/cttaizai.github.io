{"meta":{"title":"T:DM","subtitle":"diary","description":"Tの日寄","author":"mietl","url":"http://mietl.github.io","root":"/"},"pages":[{"title":"朋友","date":"2023-11-05T09:58:18.000Z","updated":"2024-05-14T05:51:27.192Z","comments":true,"path":"PY.html","permalink":"http://mietl.github.io/PY.html","excerpt":"","text":"朋友们每次编译时，随机排序 添加友链&#123; &quot;title&quot;: &quot;TのDM&quot;, &quot;link&quot;: &quot;https://mietl.github.io&quot;, &quot;img&quot;: &quot;https://mietl.github.io/images/avatar.jpeg&quot;, &quot;des&quot;: &quot;mietl&quot;&#125;"},{"title":"关于我","date":"2023-05-06T23:26:03.000Z","updated":"2024-05-14T05:51:27.196Z","comments":true,"path":"about.html","permalink":"http://mietl.github.io/about.html","excerpt":"","text":"(T‸T): 一个一直想要变得和“现在的自己”不一样的 2?岁的普通人。 网易云音乐 ID：8731353811"},{"title":"文章归档","date":"2024-05-14T05:51:27.196Z","updated":"2024-05-14T05:51:27.196Z","comments":true,"path":"archive.html","permalink":"http://mietl.github.io/archive.html","excerpt":"","text":""},{"title":"","date":"2024-05-14T05:51:27.196Z","updated":"2024-05-14T05:51:27.196Z","comments":true,"path":"custom.css","permalink":"http://mietl.github.io/custom.css","excerpt":"","text":":root{--color-primary:#f09885;--color-primary-bg:rgba(167, 191, 250, 0.14)}body{background:#f9f9f9}.nexmoe #nexmoe-header .nexmoe-list .nexmoe-list-item.true{--color-primary:#f0908c!important}.nexmoe-post .nexmoe-post-cover h1{font-size:22px;font-weight:700}article.nexmoe-py ul li{width:10%;box-shadow:unset;border:1px solid var(--color-shadow);box-shadow:unset}article.nexmoe-py ul li>a:before{background-image:unset}article.nexmoe-py ul li img{width:80%}article.nexmoe-py ul li>a{display:flex;justify-content:center}article.nexmoe-py ul li>a::after{color:#424242}code{font-family:\"Fira Code\",monospace!important}@supports (font-variation-settings:normal){code{font-family:\"Fira Code VF\",monospace}}article code{background:#eff2ff}article ul li{line-height:2em!important}.prev-next::after{content:'';display:block;clear:both}.prev-next .new{float:right}.prev-next .old{float:left}.prev-next{padding-top:24px;margin-bottom:24px}.prev-next .pager-link{display:block;border-radius:8px;padding:11px 16px 13px;width:100%;height:100%;transition:border-color .25s}.prev-next .pager-link.next{margin-left:auto;text-align:right}.prev-next .desc{display:block;line-height:20px;font-size:12px;font-weight:500;color:rgba(60,60,67,.78)}.prev-next .title{display:block;line-height:20px;font-size:14px;font-weight:500;color:var(--color-primary);transition:color .25s}.nexmoe-archives .categories a{font-size:12px;height:94px;width:calc(26.333333333% - 8px)}article h2:after{color:#fe6931}.nexmoe-post-footer{background:#f9f9f9}.gsc-main{width:99%!important}#nexmoe-search-space{background:rgba(10,10,10,.24)}.hljs{color:#e4dfd7;background:#2b312c}.hljs-subst{color:#57c3c2}.hljs-comment{color:#617172}.hljs-doctag,.hljs-keyword,.hljs-meta .hljs-keyword,.hljs-section,.hljs-selector-tag{color:#d276a3}.hljs-attr{color:#96c24e}.hljs-attribute{color:#fb9968}.hljs-name,.hljs-number,.hljs-quote,.hljs-selector-id,.hljs-template-tag,.hljs-type{color:#c8adc4}.hljs-selector-class{color:#f07c82}.hljs-link,.hljs-regexp,.hljs-selector-attr,.hljs-string,.hljs-symbol,.hljs-template-variable,.hljs-variable{color:#f9d367}.hljs-meta,.hljs-selector-pseudo{color:#ee3f4d}.hljs-built_in,.hljs-literal,.hljs-title{color:#fb9968}.hljs-bullet,.hljs-code{color:#eea6b7}.hljs-meta .hljs-string{color:#134857}.hljs-deletion{color:#ea675d}.hljs-addition{color:#aae2e2}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-formula,.hljs-operator,.hljs-params,.hljs-property,.hljs-punctuation,.hljs-tag{color:#f07c82}.hbe-input-field{color:var(--color-primary)!important}.hbe-button{background:#d7afa8!important;text-align:center!important;border-bottom:0!important;font-size:0!important}.hbe-button:before{content:\"藏起来T‸T\";font-size:15px!important}.hbe-button:after{display:none!important}.hbe-input-field-default{color:#8a7348!important;padding:0}.hbe-input-label-default::before{background:unset!important}.hbe-input-label-default::after{background:#d6b183!important}.hbe-input--filled .hbe-input-label-default::after,.hbe-input-field-default:focus+.hbe-input-label-default::after{opacity:unset!important}@font-face{font-family:\"Fira Code\";src:url(\"woff2/FiraCode-Light.woff2\") format(\"woff2\"),url(\"woff/FiraCode-Light.woff\") format(\"woff\");font-weight:300;font-style:normal}@font-face{font-family:\"Fira Code\";src:url(\"woff2/FiraCode-Regular.woff2\") format(\"woff2\"),url(\"woff/FiraCode-Regular.woff\") format(\"woff\");font-weight:400;font-style:normal}@font-face{font-family:\"Fira Code\";src:url(\"woff2/FiraCode-Medium.woff2\") format(\"woff2\"),url(\"woff/FiraCode-Medium.woff\") format(\"woff\");font-weight:500;font-style:normal}@font-face{font-family:\"Fira Code\";src:url(\"woff2/FiraCode-SemiBold.woff2\") format(\"woff2\"),url(\"woff/FiraCode-SemiBold.woff\") format(\"woff\");font-weight:600;font-style:normal}@font-face{font-family:\"Fira Code\";src:url(\"woff2/FiraCode-Bold.woff2\") format(\"woff2\"),url(\"woff/FiraCode-Bold.woff\") format(\"woff\");font-weight:700;font-style:normal}@font-face{font-family:\"Fira Code VF\";src:url(\"woff2/FiraCode-VF.woff2\") format(\"woff2-variations\"),url(\"woff/FiraCode-VF.woff\") format(\"woff-variations\");font-weight:300 700;font-style:normal}#skmg_top_middle_instagram{border-radius:14px;margin:0;padding:0;position:relative;width:100%;height:auto;display:block;overflow:hidden;background-repeat:no-repeat;background-position:left top;background-position:center center;background-color:#ff9380;background-size:auto 130%;z-index:10}#skmg_top_middle_instagram #skmg_top_middle_instagram_in{margin:0 auto 0 auto;padding:14% 0 14% 0;position:relative;width:1200px;height:auto;display:flex;flex-wrap:nowrap;justify-content:center;flex-direction:column;align-items:flex-start;padding-top:8%;padding-bottom:8%;text-decoration:none}#skmg_top_middle_instagram h3{margin:0 0 3% 0;padding:0;display:block}#skmg_top_middle_instagram h3 img{margin:0;padding:0;display:block}#skmg_top_middle_instagram a{margin:0;padding:0;display:block}#skmg_top_middle_instagram a img{margin:0;padding:0;display:block}#skmg_top_middle_instagram .instagram_more{margin:0;padding:0 24px 0 24px;width:auto;height:36px;display:block;text-align:center;vertical-align:middle;font-size:19px;line-height:30px;font-weight:700;text-decoration:none;letter-spacing:.065em;color:#fff;border-style:solid;border-color:#fff;border-width:2px;border-radius:36px;background-color:#ff9380;box-sizing:border-box;white-space:nowrap;transition:background-color .3s ease 0s}#skmg_top_middle_instagram #skmg_top_middle_instagram_in:hover .instagram_more{background-color:#fff;border-color:#fff;color:#ff9380}#skmg_top_middle_instagram #skmg_top_middle_instagram_card_cover{margin:0;padding:0;display:block;position:absolute;width:100%;height:100%}#skmg_top_middle_instagram #skmg_top_middle_instagram_card{margin:0;padding:0;display:block;position:absolute;top:0;width:28%;height:auto}#skmg_top_middle_instagram #skmg_top_middle_instagram_card #skmg_top_middle_instagram_card_body,#skmg_top_middle_instagram #skmg_top_middle_instagram_card::after{margin:0;padding:0;content:\"\";display:block;width:100%;height:0%;padding-top:142%}#skmg_top_middle_instagram #skmg_top_middle_instagram_card #skmg_top_middle_instagram_card_body{position:absolute;top:0;left:0}#skmg_top_middle_instagram #skmg_top_middle_instagram_card #skmg_top_middle_instagram_card_body .instagram_card_item{margin:0;padding:0;display:block;position:absolute;top:0;left:0;width:100%;height:100%;background-repeat:no-repeat;background-position:left top;background-position:center center;background-color:transparent;background-size:contain}#skmg_top_middle_instagram #skmg_top_middle_instagram_card::after{position:relative;top:0;left:0;transform:rotate(21deg)}#skmg_top_middle_instagram #skmg_top_middle_instagram_card #skmg_top_middle_instagram_card_body #instagram_card_type01{background-image:url(\"../images/top_content_instagram01.png\")}#skmg_top_middle_instagram #skmg_top_middle_instagram_card #skmg_top_middle_instagram_card_body #instagram_card_type02{background-image:url(\"../images/top_content_instagram02.png\")}#skmg_top_middle_instagram #skmg_top_middle_instagram_card #skmg_top_middle_instagram_card_body #instagram_card_type03{background-image:url(\"../images/top_content_instagram03.png\")}#skmg_top_middle_instagram #skmg_top_middle_instagram_card #skmg_top_middle_instagram_card_body #instagram_card_type04{background-image:url(\"../images/top_content_instagram04.png\")}#skmg_top_middle_instagram .card_init{right:-55%;transition:right 1s ease}#skmg_top_middle_instagram .card_init #skmg_top_middle_instagram_card_body{transform:rotate(84deg);opacity:0;transition:transform 1s ease,opacity 1s linear}#skmg_top_middle_instagram .card_after{right:5%}#skmg_top_middle_instagram .card_after #skmg_top_middle_instagram_card_body{transform:rotate(21deg);opacity:1}@media only screen and (max-width:1544px){#skmg_top_middle_instagram #skmg_top_middle_instagram_in{width:auto;padding-left:172px;padding-right:172px}}#skmg_top_middle_instagram #skmg_top_middle_instagram_in{width:auto;padding-left:86px;padding-right:86px;padding-left:172px;padding-right:172px}@media only screen and (max-width:1000px){#skmg_top_middle_instagram{margin:0;padding:0;position:relative;width:100%;height:auto;display:block;background-color:#ff9380;overflow:visible;background-position:-94% bottom;background-size:70% auto}#skmg_top_middle_instagram #skmg_top_middle_instagram_in{margin:0 68px 0 68px;padding:12% 0 83% 0;position:relative;width:auto;height:auto;display:flex;flex-wrap:nowrap;justify-content:center;flex-direction:column;align-items:flex-start}#skmg_top_middle_instagram h3{margin:0 0 3% 0;padding:0;display:block}#skmg_top_middle_instagram h3 img{margin:0;padding:0;display:block}#skmg_top_middle_instagram a{margin:0;padding:0;display:block}#skmg_top_middle_instagram a img{margin:0;padding:0;display:block}#skmg_top_middle_instagram #skmg_top_middle_instagram_card_cover{overflow-x:clip}#skmg_top_middle_instagram #skmg_top_middle_instagram_card{top:6%;width:68%}#skmg_top_middle_instagram .card_init{right:-100%}#skmg_top_middle_instagram .card_after{right:-2%}}@media only screen and (max-width:750px){#skmg_top_middle_instagram #skmg_top_middle_instagram_in{margin:0 9.0666vw 0 9.0666vw;padding:12% 0 83% 0;position:relative;width:auto;height:auto;display:flex;flex-wrap:nowrap;justify-content:center;flex-direction:column;align-items:flex-start}}@media only screen and (max-width:480px){#skmg_top_middle_instagram h3 img{height:11.25vw}#skmg_top_middle_instagram .instagram_more{margin:0;padding:0 5vw 0 5vw;height:7.5vw;font-size:3.9583vw;line-height:6.25vw;border-radius:7.5vw}}"}],"posts":[{"title":"pnpm包管理","slug":"build_tools/pnpm","date":"2024-01-10T15:25:27.000Z","updated":"2024-05-14T05:51:27.196Z","comments":true,"path":"2024/01/10/build_tools/pnpm/","link":"","permalink":"http://mietl.github.io/2024/01/10/build_tools/pnpm/","excerpt":"","text":"pnpm官网快速、节省磁盘空间的软件包管理器 pnpm是如何节省磁盘空间使用pnpm安装依赖后，依赖会被存储在硬盘的某一位置，当其他项目在安装依赖时，如果依赖版本存在，包里的文件将被硬链接到该项目、从而不会占用额外的磁盘空间，同时安装速度也得到了提升 硬链接(hard link)在操作系统的文件系统中，多个文件共同使用同一块存储单元 在使用硬链接的文件时，当修改了路径二中的文件内容时，路径一的文件也随之改变、它们使用的是磁盘中同一块数据 软链接(soft link)通过符号链接到文件存储位置，指向其他文件的引用，例如快捷方式 如何创建硬链接# macos ln test.js test_hard.js# windows mklink /H test.js test_hard.js 这与拷贝文件不同的是，拷贝文件会占用一定的存储空间，它们在磁盘上分别占据不同的空间 如何创建软链接# macos ln -s test.js test_soft.js# windows mklink test.js test_soft.js 删除源文件后，这个链接就失效了，无法找到引用文件 提高安装速度非扁平的 node_modules 目录解决幽灵依赖问题 通过npm 或 yarn 安装依赖时，所有包都会存放在node_modules下这就导致 Node.js 模块查找策略，你的代码中可以直接访问能找到这些不属于当前项目package.json的依赖包 安装installation # npm 全局安装npm install -g pnpm# mac brewbrew install pnpm 常用命令# 安装package.json中的依赖pnpm install# 添加依赖包pnpm add# 删除依赖包pnpm remove # 执行命令pnpm xxx# 查看包仓库存储位置pnpm store path# &gt; /Users/mietl/Library/pnpm/store/v3 当pnpm store文件夹越来越大时，可以通过 pnpm store prune 来删除一些未被引用的包，释放空间","categories":[{"name":"Tools","slug":"Tools","permalink":"http://mietl.github.io/categories/Tools/"}],"tags":[{"name":"pnpm","slug":"pnpm","permalink":"http://mietl.github.io/tags/pnpm/"},{"name":"包管理","slug":"包管理","permalink":"http://mietl.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86/"}]},{"title":"Git started","slug":"git/git-started","date":"2023-11-21T08:30:08.000Z","updated":"2024-05-14T05:51:27.196Z","comments":true,"path":"2023/11/21/git/git-started/","link":"","permalink":"http://mietl.github.io/2023/11/21/git/git-started/","excerpt":"","text":"Git startedGit 学习 如何开始使用 Git配置当你要做一些提交时，git 需要知道你是谁，因此你需要配置用户名和邮件地址，他会作为你的提交人信息 git config --global user.name &quot;mietl&quot;. // 设置用户名git config --global user.email &quot;mietl@icolud.com&quot; // 设置你的邮箱 使用—global选项后、他将保存到你的系统中，你只需要执行一次。 添加后你可以使用 git config --list 进行查看，你也可以在其他地方配置获取查看他们 &#x2F;etc&#x2F;.gitconfig系统上所有用户的通用配置 使用 git config 命令时添加—system选项，他会读写这个文件 .git&#x2F;.gitconfig当前仓库的 .git目录 ,用于当前仓库配置 ~&#x2F;.gitconfig当前用户的 git 配置，操作系统是多用户的,传递 —local选项，读写此文件 创建仓库通过git init 初始化一个仓库用来管理当前项目, 执行后，当前目录下会创建.git 隐藏文件夹。 默认情况下 git 并不会将你的文件添加到 Git 仓库中，当前仓库还是只是一个空仓库，项目中的文件还未被跟踪，因此你需要手动添加。 你可以通过git add index.js 来跟踪某个文件的 他会被添加到暂缓区。 暂缓区你可以理解为一个临时放东西的区域 如果你跟踪了某个文件，修改后需要重新添加到暂缓区中 可以使用git add . 将所有文件添加到暂缓区中 对于已经存在的仓库，通过 git clone命令 它会将完整的仓库克隆过来包含历史提交记录 git clone https://github.com/meitl.git 文件状态已跟踪的文件，具有不同状态 staged 已经添加到缓存区了 unmodified 未更改的 modifed 修改文件后的状态 通过 git status 查看文件状态 Untracked files 表示未跟踪的文件 查看更简洁的状态信息 git status —short 也可以将short 简写为-s 忽略文件如果你不希望某些文件被上传，创建 .gitignore文件定义一些排除规则，该文件指定的文件或者目录，将不会被 git 跟踪 文件提交将把文件都提交到暂缓区后，通过git commit 命令进行提交，添加 -m 参数 添加你本次提交到信息 git commit -m &quot;hhhh&quot; 通-a 参数可以将所有文件添加到暂存区中省略git add .的步骤 git commit -a -m &quot;提交说明&quot; 查看提交历史使用 git log 他会列出所有的历史提交信息包含 SHA-1 校验和(每次提交的唯一标识)、作者的名字和电子邮件地址、提交时间以及提交说明 查看更加直观的信息git log --pretty=oneline当存在分支 git log --pretty=oneline --grap 更易于查看 版本回退HEAD 是当前分支的指针，他记录着当前处于的版本默认他指向该分支的最后一次提交，你可以通过修改他 git reset --hard HEAD^ // ^上一版本 ^^上一个版本的前一个版本git reset --hard HEAD~n // 回退至前多少次版本git reset --hard 7256f72b // 指定回退至某次提交 commitId; 远程仓库验证你可以通过两种方式对远程仓库进行连接 当需要对私有仓库进行操作时，Git 服务器需要知道你是谁 通过 SSH 密钥验证 通过执行命令生成公钥和私钥 ssh-keygen -t ed25519 -C “you email&quot; // 通过-C添加注释 你也可以采用不同的加密方式 ，只要 Git 服务器支持 ssh-keygen -t rsa -b 2048 -C “hhh&quot; 生成后在你用户文件(&#x2F;Users&#x2F;用户名&#x2F;.ssh)下会产生.ssh 隐藏目录 后缀名.pub 为公钥文件，将内容配置到 Git 服务器中 配置后，在进行提交时，Git 会读取你的私钥文件，与你的帐户配置公钥进行验证。 与远程仓库建立连接默认情况下通过 git clone 命令下载的代码，是已经与远程仓库进行连接的 当你初始化一个仓库时，如果你需要管理远程仓库 添加远程地址，让本地仓库和远程仓库建立连接 git remote add &lt;name&gt; &lt;url&gt;git remote add origin https://github.com/mietl/TBlog.git 添加后 通过git remove 命令查看当前建立的远程连接地址使用-v参数 可以查看更详细的信息 重命名 git remote rename origin blog 删除远程地址 git remote remove blog Git 标签当提交历史过多时，如果你想快速找到历史提交中的某次重要版本，你可以为他添加标签 创建标签 git tag v1.0.0 在标签上添加一些附注信息 git tag -a v1.0.1 -m &#x27;fixes&#x27; 将标签上传到远程创建中 git push origin v1.0.0 上传所有 tags git push origin --tags 问题记录 问题一: 本地分支的上游分支（跟踪分支） 重现步骤 在使用git init创建本地仓库后，添加远程仓库连接后执行git pull命令时，会产生 git pull 是 git fetch 与 git merge 的结合 原因是git pull 在执行 merge的过程中，由于 Git 存在分支的概念，他并不知道你要合并那条分支你可以明确指定 git pull origin main 具体要合并的分支，但这样在进行 push 操作时也需要明确指定 你可能会觉得太麻烦，提示中还有另外一个解决方案。 你可以通过执行下面命令设置本地分支与远程分支的跟踪关系 git branch --set-upstream-to=origin/main main# 最后 main可以省略，默认他会设置当前所在的分支 将当前分支指定上游分支 为远程的 main 分支，指定后 Git 就能知道跟踪是那条分支 问题二: 拒绝合并不相干的提交历史 *重现步骤通过 Git 服务器创建好远程仓库，添加 README.md 后，创建本地仓库连接远程服务器，合并远程服务器上的 README.md 文件会产生 在执行git merge命令时，如果你的远程仓库有提交历史了(已经存在文件了) 产生原因: Git 默认不允许两个不相干历史进行合并、（没有同一个基础分支历史）如果你依旧想进行合并 添加allow-unrelated-histories参数 来允许提交不相关的提交历史 git merge --allow-unrelated-histories 参考链接 https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories-on-rebase 如果你通过 git clone 项目进行操作的话，可以绕过问题 1 和问题 2，git clone 默认会存在上游分支，克隆下来也存在相关历史 补充常用命令 命名别名 git config —global alias.br branch 集中式版本控制与分布式版本控制的区别？集中式版本控制： 只在服务器中保存了代码提交的历史记录分布式版本控制： 客户端与服务器中都有保存完整的历史记录， 在进行克隆操作时会对仓库代码进行完整备份，包括历史记录","categories":[{"name":"Git","slug":"Git","permalink":"http://mietl.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://mietl.github.io/tags/Git/"}]},{"title":"Git branch","slug":"git/git-branch","date":"2023-11-13T22:15:08.000Z","updated":"2024-05-14T05:51:27.196Z","comments":true,"path":"2023/11/13/git/git-branch/","link":"","permalink":"http://mietl.github.io/2023/11/13/git/git-branch/","excerpt":"","text":"Git 分支学习 Git 分支Git 的分支 是指向提交对象的可变指针 HEAD 指向当前分支 你可以创建多个分支，在不同分支上进行提交 t1 -&gt; t2 -&gt; t3 (main)t1 -&gt; t2 (dev) 可以很方便在不同的分支中进行开发 main 分支，在进行每次提交后， 他都会指向最后一次提交对象，当你在 mian 分支中进行操作时，dev 不会受影响，dev 依然指向 t2不变 因此你也可以切换到 dev 中做不同事情 t1 -&gt; t2 -&gt; t4 (dev) 创建分支 git branch dev 查看所有分支 git branch 切换分支 git checkout dev 创建 dev 并切换到 dev 分支 git checkout -b dev 删除分支 git branch -d devgit branch -D dev // 强制删除 查看当前分支与最后一次提交 git branch -v 分支的作用例入在开发项目时，开发完小目标功能后，添加 tag进行标记 ，想进行新功能的开发，开发过程中，原先的 tag 版本出现问题，你就可以切换到 tag 版本创建分支完成修复。 修复后发布新版本，等新功能开发好后，使用 git merge branch-name进行合并 远程分支远程分支也是一种分支结构，和普通的分支一样，只不过在远程 本地仓库与远程仓库建立连接后,设置上游分支后 git branch --set-upstream-to=origin/main 错误 fatal: the requested upstream branch ‘origin&#x2F;main’ does not exist 这是因为目前只是与远程仓库建立了的连接，远程仓库中有哪些分支还不知道 通过git fetch命令来获取最新的远程分支， 这样本地就有 origin/main 的分支了 推送分支在创建某个分支后，需要共享他时，通过 git push &lt;remote&gt; &lt;branch&gt;推送到远程 git push origin dev 跟踪远程分支 当克隆一个仓库时，会自动创建一个跟踪了 origin&#x2F;main 的本地分支 main 在你创建了本地分支 main 如果想跟踪远程分支，可以通过执行 git checkout --track &lt;remote&gt;/&lt;branch&gt; 通过git clone 下来项目时，本地分支中只会包含 main 分支，当想切换到其他远程分支 git checkout --track origin/test 该命令执行后会先去查看远程有没有这个分支，有的话就创建一个本地 test 分支，并跟踪远程分支 test 同时切换到 test 分支。 你也可以直接省略 --track 参数 直接切换到远程分支，作用时相同的。 git checkout test 删除远程分支 当不需要远程的某个分支时 git push origin --delete &lt;branch&gt; 当初始化好本地仓库后，与远程建立连接，远程分支的分支名与本地分支不一致时 git pull 时拉取代码时，指定上游分支后，提后后 推送到远程仓库时,产生如下错误, 本地分支: master远程分支: main 这个时候就会有疑问了，明明已经设置了上游分支，为什么还需要指定 这是由于 git push 推送时的默认行为 , 当 push 时会在远程寻找与本地分支同名的进行推送，没有找到就拒绝推送 常见的默认行为有一下几种，你可以通过配置来修改他 git config push.default upstream 推送到上游分支，修改后就能正常推送了 push.default nothing没有默认行为，除非明确给出了引用 push origin/main，否则拒绝推送 current推送当前分支,到远程同名分支、如果不存在则创建 upstream将当前分支推送到上游分支 simple (2.0 默认值)将当前分支推送到远程具有相同名称的分支。 参考链接 更常见的做法是通过 git checkout --track mian 来跟踪远程仓库 他会检查远程有没有 main 分支有的话，创建一个本地 main 分支，跟踪远程分支 main,再切换到 main 分支中 创建一个同名分支再进行操作，这样可以绕过不必要的麻烦。 rebase在合并不同分支的方式有两种 git merge 与 git rebase 使用 git rebase 命令你可以将某一分支上的所有修改，移至另外一个分支上， 简单理解就是改变当前分支的base 可以将其想象成在一个分支上的提交拿起来，然后放到另一个分支的最新提交上。 git checkout futuregit rebase main 执行rebase命令 首先会找到future与main分支的共同父提交，将从父提交到 future 分支的所有修改，存储为临时文件， 以分支 main 为基准，将分支future上的提交一个一个地拿起来，并逐个应用到分支 A 的最新提交上，产生一次future新提交； 最后回到目标分支 (main) 中进行合并 git checkout maingit merge future TIP: 当我们执行 rebase 操作时，是在要移动的分支中执行 rebase，而不是在目标分支上执行。 rebase 和 merge 的选择使用 rebase 与 merge 会产生不同的 Git 历史记录，该如何进行选择呢？ 使用 git merge 在合并分支时，会产生一次新的提交历史 使用 git rebase 直接将另外一个分支的修改复制了过来，并不会产生新的提交，这使历史记录更为简洁，并保持线性 你可以根据需要选择不同的合并方式 不建议再主要工作的分支中，使用rebase命令，他会造成一些意外的更改记录","categories":[{"name":"Git","slug":"Git","permalink":"http://mietl.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://mietl.github.io/tags/Git/"}]},{"title":"随想","slug":"sui-xiang","date":"2023-09-15T11:30:02.000Z","updated":"2024-05-14T05:51:27.196Z","comments":true,"path":"2023/09/15/sui-xiang/","link":"","permalink":"http://mietl.github.io/2023/09/15/sui-xiang/","excerpt":"","text":"最近发生的事一最近发生的事二","categories":[],"tags":[{"name":"记录","slug":"记录","permalink":"http://mietl.github.io/tags/%E8%AE%B0%E5%BD%95/"}]},{"title":"Flutter 动画","slug":"flutter/animations","date":"2023-07-18T08:40:39.000Z","updated":"2024-05-14T05:51:27.196Z","comments":true,"path":"2023/07/18/flutter/animations/","link":"","permalink":"http://mietl.github.io/2023/07/18/flutter/animations/","excerpt":"","text":"1. 动画初步在 Flutter 中，动画可以让应用程序更加生动和具有吸引力。Flutter 中的动画是基于抽象类 Animation 实现的，Animation 对象 用于描述动画状态和取值范围，负责生成动画的值和当前动画的状态通过监听动画的状态变化，我们可以根据当前的动画值来重新构建 widget 更新界面的显示效果。 与 Animation 一起使用的常用类包括： AnimationController管理 Animation. CurvedAnimation 用于定义动画执行曲线。 Tween 用于定义在指定范围内执行动画的值。例如，使用 Tween 定义从红色到蓝色或从 0 到 255 的数值，实现颜色的变化 使用 Listeners 和 StatusListeners 用于监视动画状态变化 2. 动画控制器（Animation­Controller）AnimationController AnimationController 是 Animation 的一个特殊子类他可以控制动画开始、停止、向前、向后等操作，还提供了Listeners 和 StatusListeners方法 用于监视动画状态变化 1.创建动画控制器: // 创建不启动运行AnimationController controller = AnimationController( duration: Duration(seconds: 2), // 动画持续时间为2秒 // reverse: true, 动画方向 // repeatCount: 3, 动画重复次数 vsync: this, // 传入TickerProvider对象); 要启动动画，我们可以调用 AnimationController 的 .forward()方法，它会让动画从头到尾播放。你也可以使用其他的方法来控制动画 stop() 停止动画 reverse() 反向播放动画 dispose() 释放资源 创建 时 AnimationController，需要一个必传vsync 参数。 vsync 可以防止屏幕外动画消耗不必要的资源。例如锁屏后，处于应用后台时,都不需要执行动画。 您可以在类定义中添加 SingleTickerProviderStateMixin 将您的有状态对象用作 vsync(垂直同步信号),当有接收到信号时继续执行动画。 class _BobState extends State&lt;tickerApp&gt; with SingleTickerProviderStateMixin &#123; late Animation&lt;double&gt; animation; late AnimationController controller; @override initState() &#123; controller = AnimationController(duration: const Duration(seconds: 2), vsync: this); animation = Tween&lt;double&gt;(begin: 0, end: 300) .animate(controller) ..addListener(() &#123; setState(() &#123; /* 这里用来更新界面 */ &#125;); &#125;); controller.forward(); &#125; @override Widget build(BuildContext context) &#123; return Center( child: Container( margin: const EdgeInsets.symmetric(vertical: 10), height: animation.value, width: animation.value, child: const Text(&#x27;Bob! ！！&#x27;), ), ); &#125;&#125; 使用 SingleTickerProviderStateMixin 时，需要注意他的泛型约束 他必须在 State 类中，并且需要继承自 StatefulWidget mixin SingleTickerProviderStateMixin&lt;T extends StatefulWidget&gt; on State&lt;T&gt; implements TickerProvider 2.动画状态(AnimationStatus) AnimationStatus 类中包含了不同的状态常量， AnimationStatus.completed 表示动画已完成 AnimationStatus.dismissed 表示动画已消失 AnimationStatus.forward 表示动画正在正向播放 AnimationStatus.reverse 表示动画正在反向播放 你可以根据这些状态常量来执行相应的操作。 要监听动画的状态变化，我们可以给 AnimationController 添加一个状态监听器，例如： controller.addStatusListener((status) &#123; // 根据不同的状态做不同的处理 if (status == AnimationStatus.completed) &#123; // 动画完成时 print(&#x27;Animation completed&#x27;); // 可以反向播放或者停止动画 controller.reverse(); // controller.stop(); &#125; else if (status == AnimationStatus.dismissed) &#123; // 动画消失时 print(&#x27;Animation dismissed&#x27;); // 可以正向播放或者停止动画 controller.forward(); // controller.stop(); &#125; else if (status == AnimationStatus.forward) &#123; // 动画正向播放时 print(&#x27;Animation forward&#x27;); &#125; else if (status == AnimationStatus.reverse) &#123; // 动画反向播放时 print(&#x27;Animation reverse&#x27;); &#125;&#125;) 3. 动画曲线 (Curved­Animation)在动画中，我们可以使用 CurvedAnimation 来定义动画执行曲线。例如，我们可以将动画的执行速度定义为先快后慢，而不是默认的线性曲线（匀速）。 animation = CurvedAnimation(parent: controller, curve: Curves.easeIn); Flutter 中提供了许多常用的曲线，你可以在 Curves 类 ↗ 中找到完整的曲线列表(带有视觉预览)。 CurvedAnimation 包装了它正在修改的对象，因此不需要子类化 AnimationController 对象来实现动画的曲线效果 final AnimationController controller = AnimationController(duration: const Duration(seconds: 1), vsync: this);final Animation&lt;double&gt; animation = CurvedAnimation(parent: controller, curve: Curves.easeIn); 4. Tween默认情况下， AnimationController 对象范围为 0.0 到 1.0。如果您需要不同的范围或不同的数据类型可以通过 Tween 配置动画以插入不同的范围或数据类型 tween = Tween&lt;double&gt;(begin: 100.0, end: 200.0); 动画还可以插入除 double 之外的类型，例如 Animation 或 Animaion colorTween = ColorTween(begin: Colors.transparent, end: Colors.black54); 要使用 Tween 对象，需要调用 animate() 并传入控制器对象,来创建一个动画对象。例如 animation = Tween&lt;double&gt;(begin: 100.0, end: 200.0).animate(controller); 这样，animation 对象就会根据 Tween 对象的 begin 和 end 值，在 controller 对象的 duration 时间内，从 100.0 变化到 200.0。你可以通过 animation.value 来获取当前的值，或者通过 animation.addListener 来添加监听器，当值变化时执行一些操作。 AnimatedWidgetAnimatedBuilderHero","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://mietl.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://mietl.github.io/tags/Flutter/"}]}],"categories":[{"name":"Tools","slug":"Tools","permalink":"http://mietl.github.io/categories/Tools/"},{"name":"Git","slug":"Git","permalink":"http://mietl.github.io/categories/Git/"},{"name":"Flutter","slug":"Flutter","permalink":"http://mietl.github.io/categories/Flutter/"}],"tags":[{"name":"pnpm","slug":"pnpm","permalink":"http://mietl.github.io/tags/pnpm/"},{"name":"包管理","slug":"包管理","permalink":"http://mietl.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86/"},{"name":"Git","slug":"Git","permalink":"http://mietl.github.io/tags/Git/"},{"name":"记录","slug":"记录","permalink":"http://mietl.github.io/tags/%E8%AE%B0%E5%BD%95/"},{"name":"Flutter","slug":"Flutter","permalink":"http://mietl.github.io/tags/Flutter/"}]}