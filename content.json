{"meta":{"title":"T:DM","subtitle":"feedId:60275609228025856+userId:56517623520646144","description":"Tの日寄","author":"mietl","url":"http://mietl.github.io","root":"/"},"pages":[{"title":"朋友","date":"2023-11-05T09:58:18.000Z","updated":"2024-10-04T05:49:46.341Z","comments":true,"path":"PY.html","permalink":"http://mietl.github.io/PY.html","excerpt":"","text":"朋友们每次编译时，随机排序 添加友链&#123; &quot;title&quot;: &quot;TのDM&quot;, &quot;link&quot;: &quot;https://mietl.github.io&quot;, &quot;img&quot;: &quot;https://mietl.github.io/images/avatar.jpeg&quot;, &quot;des&quot;: &quot;mietl&quot;&#125;"},{"title":"关于我","date":"2023-05-06T23:26:03.000Z","updated":"2024-10-04T05:49:46.343Z","comments":true,"path":"about.html","permalink":"http://mietl.github.io/about.html","excerpt":"","text":"(T‸T): 一个一直想要变得和“现在的自己”不一样的 2?岁的普通人。 现实也许没有那么天真，但我想要做什么，虽然不知道答案，但是只要有所行动，就一定会有所改变。 网易云音乐 ID：8731353811"},{"title":"文章归档","date":"2024-10-04T05:49:46.344Z","updated":"2024-10-04T05:49:46.344Z","comments":true,"path":"archive.html","permalink":"http://mietl.github.io/archive.html","excerpt":"","text":""},{"title":"","date":"2024-10-04T05:49:46.344Z","updated":"2024-10-04T05:49:46.344Z","comments":true,"path":"custom.css","permalink":"http://mietl.github.io/custom.css","excerpt":"","text":":root { --color-primary: #f07c82; --color-primary-bg: rgba(238, 200, 189, 0.14); } .nexmoe-post-cover img[src*=\"images/dear_diary\"]{ filter: blur(12px); } .nexmoe-post:has(.hbe-button) .nexmoe-post-cover img{ filter: unset !important; } body { background: #f9f9f9; font-family: Helvetica,ResourceHanRoundedCN, system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; } .nexmoe #nexmoe-header .nexmoe-list .nexmoe-list-item.true { --color-primary: #f0908c !important; } .nexmoe-post .nexmoe-post-cover h1 { font-size: 22px; font-weight: 700; } article.nexmoe-py ul li { width: 10%; box-shadow: unset; border: 1px solid var(--color-shadow); box-shadow: unset; } article.nexmoe-py ul li>a:before { background-image: unset; } article.nexmoe-py ul li img { width: 80%; } article.nexmoe-py ul li>a { display: flex; justify-content: center; } article.nexmoe-py ul li>a::after { color: #424242; } code { font-family: \"Fira Code\", monospace !important; } @supports (font-variation-settings: normal) { code { font-family: \"Fira Code VF\", monospace; } } /* article code { background: #eff2ff; background: rgba(223, 234, 155,.4); background: #F3EBE1; } */ article ul li { line-height: 2em !important; } .prev-next::after { content: ''; display: block; clear: both; } .prev-next .new { float: right; } .prev-next .old { float: left; } .prev-next { padding-top: 24px; margin-bottom: 24px; } .prev-next .pager-link { display: block; border-radius: 8px; padding: 11px 16px 13px; width: 100%; height: 100%; transition: border-color 0.25s; } .prev-next .pager-link.next { margin-left: auto; text-align: right; } .prev-next .desc { display: block; line-height: 20px; font-size: 12px; font-weight: 500; color: rgba(60, 60, 67, .78); } .prev-next .title { display: block; line-height: 20px; font-size: 14px; font-weight: 500; color: var(--color-primary); transition: color 0.25s; } .nexmoe-archives .categories a { font-size: 12px; height: 94px; width: calc(26.333333333% - 8px); } article h2:after { color: #fe6931; } .nexmoe-post-footer { background: #f9f9f9; } .gsc-main { width: 99% !important; } #nexmoe-search-space { background: rgba(10, 10, 10, 0.24); } /* fira_code */ @font-face { font-family: \"Fira Code\"; src: url(\"fonts/FiraCode/FiraCode-Light.woff2\") format(\"woff2\"), url(\"fonts/Firacode/woff/FiraCode-Light.woff\") format(\"woff\"); font-weight: 300; font-style: normal; } @font-face { font-family: \"Fira Code\"; src: url(\"fonts/FiraCode/FiraCode-Regular.woff2\") format(\"woff2\"), url(\"fonts/Firacode/FiraCode-Regular.woff\") format(\"woff\"); font-weight: 400; font-style: normal; } @font-face { font-family: \"Fira Code\"; src: url(\"fonts/FiraCode/FiraCode-Medium.woff2\") format(\"woff2\"), url(\"woff/FiraCode-Medium.woff\") format(\"woff\"); font-weight: 500; font-style: normal; } @font-face { font-family: \"Fira Code\"; src: url(\"fonts/FiraCode/FiraCode-SemiBold.woff2\") format(\"woff2\"), url(\"woff/FiraCode-SemiBold.woff\") format(\"woff\"); font-weight: 600; font-style: normal; } @font-face { font-family: \"Fira Code\"; src: url(\"fonts/FiraCode/FiraCode-Bold.woff2\") format(\"woff2\"), url(\"woff/FiraCode-Bold.woff\") format(\"woff\"); font-weight: 700; font-style: normal; } @font-face { font-family: \"Fira Code VF\"; src: url(\"fonts/Firacode/FiraCode-VF.woff2\") format(\"woff2-variations\"), url(\"woff/FiraCode-VF.woff\") format(\"woff-variations\"); /* font-weight requires a range: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide#Using_a_variable_font_font-face_changes */ font-weight: 300 700; font-style: normal; } @font-face { font-family: 'ResourceHanRoundedCN'; src: url('fonts/ResourceHanRoundedCN/ResourceHanRoundedCN-Bold.woff2') format('woff2'); font-weight: 700; font-style: normal; font-display: swap; } @font-face { font-family: 'ResourceHanRoundedCN'; src: url('/fonts/ResourceHanRoundedCN/ResourceHanRoundedCN-Medium.woff2') format('woff2'); font-weight: 500; font-style: normal; font-display: swap; } /* 代码高亮 */ .hljs { color: #e4dfd7; background: #2b312c; } .hljs-subst { color: #57c3c2; } .hljs-comment { color: #617172; } .hljs-keyword, .hljs-selector-tag, .hljs-meta .hljs-keyword, .hljs-doctag, .hljs-section { color: #d276a3; } .hljs-attr { color: #96c24e; } .hljs-attribute { color: #fb9968; } .hljs-name, .hljs-type, .hljs-number, .hljs-selector-id, .hljs-quote, .hljs-template-tag { color: #c8adc4; } .hljs-selector-class { color: #f07c82; } .hljs-string, .hljs-regexp, .hljs-symbol, .hljs-variable, .hljs-template-variable, .hljs-link, .hljs-selector-attr { color: #f9d367; } .hljs-meta, .hljs-selector-pseudo { color: #ee3f4d; } .hljs-built_in, .hljs-title, .hljs-literal { color: #fb9968; } .hljs-bullet, .hljs-code { color: #eea6b7; } .hljs-meta .hljs-string { color: #134857; } .hljs-deletion { color: #ea675d; } .hljs-addition { color: #aae2e2; } .hljs-emphasis { font-style: italic; } .hljs-strong { font-weight: bold; } .hljs-formula, .hljs-operator, .hljs-params, .hljs-property, .hljs-punctuation, .hljs-tag { color: #f07c82; } /* hbe 文章加密样式 */ .hbe-input-field { color: var(--color-primary) !important; } .hbe-button { background: rgb(215, 175, 168) !important; text-align: center !important; border-bottom: 0 !important; font-size: 0 !important; } .hbe-button:before { content: \"藏起来T‸T\"; font-size: 15px !important; } .hbe-button:after { display: none !important; } .hbe-input-field-default { color: rgb(138, 115, 72) !important; padding: 0; } .hbe-input-label-default::before { background: unset !important; } .hbe-input-label-default::after { background: rgb(214, 177, 131) !important; } .hbe-input-field-default:focus+.hbe-input-label-default::after, .hbe-input--filled .hbe-input-label-default::after { opacity: unset !important; } /* ----- */ .t-video { border-radius: 14px; width: 428px; height: 214px; display: block; overflow: hidden; background-size: auto 130%; z-index: 10; } kbd{ display: inline-block; padding: 4px; line-height: 14px; color: rgb(31, 35, 40); vertical-align: middle; background-color: rgb(246, 248, 250); border: solid 1px rgba(209, 217, 224, 0.7); border-bottom-color: rgba(209, 217, 224, 0.7); border-radius: 6px; box-shadow: rgba(209, 217, 224, 0.7) 0px -1px 0px 0px inset; }"}],"posts":[{"title":"MacOS使用记录📔","slug":"macos/macos-wiki","date":"2024-08-26T11:30:02.000Z","updated":"2024-10-04T05:49:46.343Z","comments":true,"path":"2024/08/26/macos/macos-wiki/","link":"","permalink":"http://mietl.github.io/2024/08/26/macos/macos-wiki/","excerpt":"","text":"设置允许安装任意来源的 AppMacOS 15之前版本终端执行以下命令 sudo spctl --master-disable MacOS 15 开启任何来源 下载描述文件 AnySource.mobileconfig 双击安装描述文件 我的 App App Cleaner &amp; Uninstaller.app 卸载软件 Beyond Compare 好用的文件对比工具 Bob 翻译工具 (付费) ChatGPT HuggingChat 彩虹工具箱 Cork (付费) One Switch 擦屏幕的时候，里面的锁定键盘很有用 📖 阅读 Skim 简单的PDF阅读 Arc 好看实用浏览器brew install --cask arc NetNewsWire 开源免费的 RSS 阅读器 推荐Followbrew install --cask netnewswire Follow 下一代信息浏览器。我的邀请码: 9WaR4OBmnP 🔨 开发 JetBrains Toolbox 管理JetBrains系列软件，更新 OrbStack brew install orbstack Warp brew install --cask warp Zed Cursor Google Chrome浏览器插件codebox Visual Studio Code 主题推荐 Chinolor Theme 字体推荐 FiraCode 查看当前安装扩展 bash code --list-extensions Android Studio 开发移动端App 主题推荐 Mariana Pro Theme 和 我喜欢的配色方案 Chinolor.icls Fleet GitButler Bruno - 开源 IDE，测试 API工具。 DevToys Proxyman 📝 笔记 Anytype 自由的笔记软件 Typora我正在使用的主题 typora-theme-nexmoe 🎵 音乐 NeteaseMusic Spotify&#x2F;Spotube 系统工具 MediaMate 不一样的 音量、亮度和正在播放的效果，很好看🤩 (付费) Keka 开源，可爱的压缩软件 brew install --cask keka Loop 最好用的窗口管理工具，丝滑 Mos 开源 让鼠标平滑，反向滚动 Proxifier 全局代理 # 激活码# V2P427L-9Y552-5433E-8DSR3-58Z68# V33CWNN-WYTP4-SD83W-ASDFR-84KEA SoundSource 声音控制软件，可以控制单个应用声音大小 # 激活码 Your Name: Pertim Macwk Your Code: ZLAT-QXP9-K3DW-K2UH-2WX9-96NH-3KPJ-NDY6-DC9D 微信输入法 简洁的输入法， 支持跨设备(手机&#x2F;电脑)复制粘贴 iPreview - 强大的快捷预览扩展程序 (付费) Caffeinated 防休眠应用 (付费) DockDoor 类似windows预览窗口 实用工具 Shadowrocket 翻墙 (付费) Diffusers DockX Dropover Flow - 番茄工作法 &amp; 专注计时器 Input Source Pro 自动切换输入法，根据不同应用、不同网站，自动切换 brew install --cask input-source-pro Itsycal 小巧的菜单栏日历 &#39;TT&#39;MMd-e Latest 检查软件哪些软件更新 MagicNotch 菜单栏刘海，快捷按钮操作 Marta - 双窗格文件管理 brew install --cask marta Windows App 远程 windows电脑 Mochi Diffusion Ollama - 本地大模型 Ollamac 原生开发的Ollama应用聊天界面 One Switch Parallels Desktop Mac最好的虚拟机软件 PasteNow 好用的剪贴板工具 PictureView 免费的图片浏览工具 QuickRecorder 开源的录屏软件 brew install lihaoyun6/tap/quickrecorder Raycast brew install --cask raycast Riffo 通过 AI 重命名文件名 Tencent Lemon 腾讯开源的Mac清理工具 Things3 好看的任务清单ToDo软件 Reminders MenuBar + Apple提醒事项 ToDesk 远程控制工具 Xnip 免费的截图软件，支持长截图，好看 keyviz 在屏幕上显示，你正在按下的键 LocalSend 视频 📺 IINA 开源好用的视频播放器 brew install --cask iina 哔哩哔哩 社交 💬 即刻(ios) 上班摸鱼 WeChat 聊天 Mimestream 好用的Gmail邮箱 Discord brew install --cask discord Telegram TencentMeeting - 腾讯会议 开会讨论 编程字体FiraCode 破解站 appstorrent xmac Mac书签 2023年🧑‍💻工程师的 Mac 工具箱2023年工程师必备的 Mac 软件清单 &#x2F; 订阅技巧分享，帮助你提高生产力 - 掘金 终极配置教程 工具 GitHub - corpnewt&#x2F;gibMacOS: Py2&#x2F;py3 script that can download macOS components direct from Apple Mac软件注入 | InjectLib 快捷键 command + option + x 剪贴文件 小技巧 访达 command 键 + 拖动软件 可以将软件图标添加到访达顶部，快捷使用 option 键 + 拖动访达窗口大小，可以记录窗口大小，下次打开&#x2F;新建窗口时，还是之前拖动的大小 在 ~&#x2F;Users&#x2F; 用户名下 创建 Developer 目录,系统会自动添加锤子图标，你可以将他添加到边栏 长按 option 键后 点击日期，可以打开勿扰模式 终端代理 # 1082 为代理端口号，替换成你代理软件的端口 export https_proxy=http://127.0.0.1:1082;export http_proxy=http://127.0.0.1:1082;export all_proxy=socks5://127.0.0.1:1082;","categories":[],"tags":[{"name":"MacOS","slug":"MacOS","permalink":"http://mietl.github.io/tags/MacOS/"}]},{"title":"pnpm包管理","slug":"tools/pnpm","date":"2024-01-10T15:25:27.000Z","updated":"2024-10-04T05:49:46.343Z","comments":true,"path":"2024/01/10/tools/pnpm/","link":"","permalink":"http://mietl.github.io/2024/01/10/tools/pnpm/","excerpt":"","text":"pnpm官网快速、节省磁盘空间的软件包管理器 pnpm是如何节省磁盘空间使用pnpm安装依赖后，依赖会被存储在硬盘的某一位置，当其他项目在安装依赖时，如果依赖版本存在，包里的文件将被硬链接到该项目、从而不会占用额外的磁盘空间，同时安装速度也得到了提升 硬链接(hard link)在操作系统的文件系统中，多个文件共同使用同一块存储单元 在使用硬链接的文件时，当修改了路径二中的文件内容时，路径一的文件也随之改变、它们使用的是磁盘中同一块数据 软链接(soft link)通过符号链接到文件存储位置，指向其他文件的引用，例如快捷方式 如何创建硬链接# macos ln test.js test_hard.js# windows mklink /H test.js test_hard.js 这与拷贝文件不同的是，拷贝文件会占用一定的存储空间，它们在磁盘上分别占据不同的空间 如何创建软链接# macos ln -s test.js test_soft.js# windows mklink test.js test_soft.js 删除源文件后，这个链接就失效了，无法找到引用文件 提高安装速度非扁平的 node_modules 目录解决幽灵依赖问题 通过npm 或 yarn 安装依赖时，所有包都会存放在node_modules下这就导致 Node.js 模块查找策略，你的代码中可以直接访问能找到这些不属于当前项目package.json的依赖包 安装installation # npm 全局安装npm install -g pnpm# mac brewbrew install pnpm 常用命令# 安装package.json中的依赖pnpm install# 添加依赖包pnpm add# 删除依赖包pnpm remove # 执行命令pnpm xxx# 查看包仓库存储位置pnpm store path# &gt; /Users/mietl/Library/pnpm/store/v3 当pnpm store文件夹越来越大时，可以通过 pnpm store prune 来删除一些未被引用的包，释放空间","categories":[{"name":"Tools","slug":"Tools","permalink":"http://mietl.github.io/categories/Tools/"}],"tags":[{"name":"pnpm","slug":"pnpm","permalink":"http://mietl.github.io/tags/pnpm/"},{"name":"包管理","slug":"包管理","permalink":"http://mietl.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86/"}]},{"title":"Git started","slug":"git/git-started","date":"2023-11-21T08:30:08.000Z","updated":"2024-10-04T05:49:46.343Z","comments":true,"path":"2023/11/21/git/git-started/","link":"","permalink":"http://mietl.github.io/2023/11/21/git/git-started/","excerpt":"","text":"Git startedGit 学习 如何开始使用 Git配置当你要做一些提交时，git 需要知道你是谁，因此你需要配置用户名和邮件地址，他会作为你的提交人信息 # 设置用户名git config --global user.name &quot;mietl&quot; # 设置你的邮箱git config --global user.email &quot;mietl.moe@icolud.com&quot; 使用—global选项后、他将保存到你的系统中，你只需要执行一次。 添加后你可以使用 git config --list 进行查看，你也可以在其他地方配置获取查看他们 &#x2F;etc&#x2F;.gitconfig系统上所有用户的通用配置 使用 git config 命令时添加—system选项，他会读写这个文件 .git&#x2F;.gitconfig当前仓库的 .git目录 ,用于当前仓库配置 ~&#x2F;.gitconfig当前用户的 git 配置，操作系统是多用户的,传递 —local选项，读写此文件 创建仓库通过git init 初始化一个仓库用来管理当前项目, 执行后，当前目录下会创建.git 隐藏文件夹。 默认情况下 git 并不会将你的文件添加到 Git 仓库中，当前仓库还是只是一个空仓库，项目中的文件还未被跟踪，因此你需要手动添加。 你可以通过git add index.js 来跟踪某个文件的 他会被添加到暂缓区。 暂缓区你可以理解为一个临时放东西的区域 如果你跟踪了某个文件，修改后需要重新添加到暂缓区中 可以使用git add . 将所有文件添加到暂缓区中 对于已经存在的仓库，通过 git clone命令 它会将完整的仓库克隆过来包含历史提交记录 git clone https://github.com/meitl.git 文件状态已跟踪的文件，具有不同状态 staged 已经添加到暂缓区了 unmodified 未更改的 modifed 修改文件后的状态 通过 git status 查看文件状态 Untracked files 表示未跟踪的文件 查看更简洁的状态信息 git status —short 也可以将short 简写为-s 忽略文件如果你不希望某些文件被上传，创建 .gitignore文件定义一些排除规则，该文件指定的文件或者目录，将不会被 git 跟踪 文件提交将把文件都提交到暂缓区后，通过git commit 命令进行提交，添加 -m 参数 添加你本次提交到信息 git commit -m &quot;hhhh&quot; 通-a 参数可以将所有文件添加到暂存区中省略git add .的步骤 git commit -a -m &quot;提交说明&quot; 查看提交历史使用 git log 他会列出所有的历史提交信息包含 SHA-1 校验和(每次提交的唯一标识)、作者的名字和电子邮件地址、提交时间以及提交说明 查看更加直观的信息git log --pretty=oneline当存在分支 git log --pretty=oneline --grap 更易于查看 版本回退HEAD 是当前分支的指针，他记录着当前处于的版本默认他指向该分支的最后一次提交，你可以通过修改他 git reset --hard HEAD^ // ^上一版本 ^^上一个版本的前一个版本git reset --hard HEAD~n // 回退至前多少次版本git reset --hard 7256f72b // 指定回退至某次提交 commitId; 远程仓库验证你可以通过两种方式对远程仓库进行连接 当需要对私有仓库进行操作时，Git 服务器需要知道你是谁 通过 SSH 密钥验证 通过执行命令生成公钥和私钥 ssh-keygen -t ed25519 -C “you email&quot; // 通过-C添加注释 你也可以采用不同的加密方式 ，只要 Git 服务器支持 ssh-keygen -t rsa -b 2048 -C “hhh&quot; 生成后在你用户文件(&#x2F;Users&#x2F;用户名&#x2F;.ssh)下会产生.ssh 隐藏目录 后缀名.pub 为公钥文件，将内容配置到 Git 服务器中 配置后，在进行提交时，Git 会读取你的私钥文件，与你的帐户配置公钥进行验证。 与远程仓库建立连接默认情况下通过 git clone 命令下载的代码，是已经与远程仓库进行连接的 当你初始化一个仓库时，如果你需要管理远程仓库 添加远程地址，让本地仓库和远程仓库建立连接 git remote add &lt;name&gt; &lt;url&gt;git remote add origin https://github.com/mietl/TBlog.git 添加后 通过git remove 命令查看当前建立的远程连接地址使用-v参数 可以查看更详细的信息 重命名 git remote rename origin blog 删除远程地址 git remote remove blog Git 标签当提交历史过多时，如果你想快速找到历史提交中的某次重要版本，你可以为他添加标签 创建标签 git tag v1.0.0 在标签上添加一些附注信息 git tag -a v1.0.1 -m &#x27;fixes&#x27; 将标签上传到远程创建中 git push origin v1.0.0 上传所有 tags git push origin --tags 问题记录 问题一: 本地分支的上游分支（跟踪分支） 重现步骤 在使用git init创建本地仓库后，添加远程仓库连接后执行git pull命令时，会产生 git pull 是 git fetch 与 git merge 的结合 原因是git pull 在执行 merge的过程中，由于 Git 存在分支的概念，他并不知道你要合并那条分支你可以明确指定 git pull origin main 具体要合并的分支，但这样在进行 push 操作时也需要明确指定 你可能会觉得太麻烦，提示中还有另外一个解决方案。 你可以通过执行下面命令设置本地分支与远程分支的跟踪关系 git branch --set-upstream-to=origin/main main# 最后 main可以省略，默认他会设置当前所在的分支 将当前分支指定上游分支 为远程的 main 分支，指定后 Git 就能知道跟踪是那条分支 问题二: 拒绝合并不相干的提交历史 *重现步骤通过 Git 服务器创建好远程仓库，添加 README.md 后，创建本地仓库连接远程服务器，合并远程服务器上的 README.md 文件会产生 在执行git merge命令时，如果你的远程仓库有提交历史了(已经存在文件了) 产生原因: Git 默认不允许两个不相干历史进行合并、（没有同一个基础分支历史）如果你依旧想进行合并 添加allow-unrelated-histories参数 来允许提交不相关的提交历史 git merge --allow-unrelated-histories 参考链接 https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories-on-rebase 如果你通过 git clone 项目进行操作的话，可以绕过问题 1 和问题 2，git clone 默认会存在上游分支，克隆下来也存在相关历史 补充常用命令 命名别名 git config —global alias.br branch 集中式版本控制与分布式版本控制的区别？集中式版本控制： 只在服务器中保存了代码提交的历史记录分布式版本控制： 客户端与服务器中都有保存完整的历史记录， 在进行克隆操作时会对仓库代码进行完整备份，包括历史记录","categories":[{"name":"Tools","slug":"Tools","permalink":"http://mietl.github.io/categories/Tools/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://mietl.github.io/tags/Git/"}]},{"title":"Git branch","slug":"git/git-branch","date":"2023-11-13T22:15:08.000Z","updated":"2024-10-04T05:49:46.343Z","comments":true,"path":"2023/11/13/git/git-branch/","link":"","permalink":"http://mietl.github.io/2023/11/13/git/git-branch/","excerpt":"","text":"Git 分支学习 Git 分支Git 的分支 是指向提交对象的可变指针 HEAD 指向当前分支 你可以创建多个分支，在不同分支上进行提交 t1 -&gt; t2 -&gt; t3 (main)t1 -&gt; t2 (dev) 可以很方便在不同的分支中进行开发 main 分支，在进行每次提交后， 他都会指向最后一次提交对象，当你在 mian 分支中进行操作时，dev 不会受影响，dev 依然指向 t2不变 因此你也可以切换到 dev 中做不同事情 t1 -&gt; t2 -&gt; t4 (dev) 创建分支 git branch dev 查看所有分支 git branch 切换分支 git checkout dev 创建 dev 并切换到 dev 分支 git checkout -b dev 删除分支 git branch -d devgit branch -D dev // 强制删除 查看当前分支与最后一次提交 git branch -v 分支的作用例入在开发项目时，开发完小目标功能后，添加 tag进行标记 ，想进行新功能的开发，开发过程中，原先的 tag 版本出现问题，你就可以切换到 tag 版本创建分支完成修复。 修复后发布新版本，等新功能开发好后，使用 git merge branch-name进行合并 远程分支远程分支也是一种分支结构，和普通的分支一样，只不过在远程 本地仓库与远程仓库建立连接后,设置上游分支后 git branch --set-upstream-to=origin/main 错误 fatal: the requested upstream branch ‘origin&#x2F;main’ does not exist 这是因为目前只是与远程仓库建立了的连接，远程仓库中有哪些分支还不知道 通过git fetch命令来获取最新的远程分支， 这样本地就有 origin/main 的分支了 推送分支在创建某个分支后，需要共享他时，通过 git push &lt;remote&gt; &lt;branch&gt;推送到远程 git push origin dev 跟踪远程分支 当克隆一个仓库时，会自动创建一个跟踪了 origin&#x2F;main 的本地分支 main 在你创建了本地分支 main 如果想跟踪远程分支，可以通过执行 git checkout --track &lt;remote&gt;/&lt;branch&gt; 通过git clone 下来项目时，本地分支中只会包含 main 分支，当想切换到其他远程分支 git checkout --track origin/test 该命令执行后会先去查看远程有没有这个分支，有的话就创建一个本地 test 分支，并跟踪远程分支 test 同时切换到 test 分支。 你也可以直接省略 --track 参数 直接切换到远程分支，作用时相同的。 git checkout test 删除远程分支 当不需要远程的某个分支时 git push origin --delete &lt;branch&gt; 当初始化好本地仓库后，与远程建立连接，远程分支的分支名与本地分支不一致时 git pull 时拉取代码时，指定上游分支后，提后后 推送到远程仓库时,产生如下错误, 本地分支: master远程分支: main 这个时候就会有疑问了，明明已经设置了上游分支，为什么还需要指定 这是由于 git push 推送时的默认行为 , 当 push 时会在远程寻找与本地分支同名的进行推送，没有找到就拒绝推送 常见的默认行为有一下几种，你可以通过配置来修改他 git config push.default upstream 推送到上游分支，修改后就能正常推送了 push.default nothing没有默认行为，除非明确给出了引用 push origin/main，否则拒绝推送 current推送当前分支,到远程同名分支、如果不存在则创建 upstream将当前分支推送到上游分支 simple (2.0 默认值)将当前分支推送到远程具有相同名称的分支。 参考链接 更常见的做法是通过 git checkout --track mian 来跟踪远程仓库 他会检查远程有没有 main 分支有的话，创建一个本地 main 分支，跟踪远程分支 main,再切换到 main 分支中 创建一个同名分支再进行操作，这样可以绕过不必要的麻烦。 rebase在合并不同分支的方式有两种 git merge 与 git rebase 使用 git rebase 命令你可以将某一分支上的所有修改，移至另外一个分支上， 简单理解就是改变当前分支的base 可以将其想象成在一个分支上的提交拿起来，然后放到另一个分支的最新提交上。 git checkout futuregit rebase main 执行rebase命令 首先会找到future与main分支的共同父提交，将从父提交到 future 分支的所有修改，存储为临时文件， 以分支 main 为基准，将分支future上的提交一个一个地拿起来，并逐个应用到分支 A 的最新提交上，产生一次future新提交； 最后回到目标分支 (main) 中进行合并 git checkout maingit merge future TIP: 当我们执行 rebase 操作时，是在要移动的分支中执行 rebase，而不是在目标分支上执行。 rebase 和 merge 的选择使用 rebase 与 merge 会产生不同的 Git 历史记录，该如何进行选择呢？ 使用 git merge 在合并分支时，会产生一次新的提交历史 使用 git rebase 直接将另外一个分支的修改复制了过来，并不会产生新的提交，这使历史记录更为简洁，并保持线性 你可以根据需要选择不同的合并方式 不建议再主要工作的分支中，使用rebase命令，他会造成一些意外的更改记录","categories":[{"name":"Tools","slug":"Tools","permalink":"http://mietl.github.io/categories/Tools/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://mietl.github.io/tags/Git/"}]},{"title":"随想","slug":"sui-xiang","date":"2023-09-15T11:30:02.000Z","updated":"2024-10-04T05:49:46.343Z","comments":true,"path":"2023/09/15/sui-xiang/","link":"","permalink":"http://mietl.github.io/2023/09/15/sui-xiang/","excerpt":"","text":"最近发生的事一最近发生的事二","categories":[],"tags":[{"name":"记录","slug":"记录","permalink":"http://mietl.github.io/tags/%E8%AE%B0%E5%BD%95/"}]}],"categories":[{"name":"Tools","slug":"Tools","permalink":"http://mietl.github.io/categories/Tools/"}],"tags":[{"name":"MacOS","slug":"MacOS","permalink":"http://mietl.github.io/tags/MacOS/"},{"name":"pnpm","slug":"pnpm","permalink":"http://mietl.github.io/tags/pnpm/"},{"name":"包管理","slug":"包管理","permalink":"http://mietl.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86/"},{"name":"Git","slug":"Git","permalink":"http://mietl.github.io/tags/Git/"},{"name":"记录","slug":"记录","permalink":"http://mietl.github.io/tags/%E8%AE%B0%E5%BD%95/"}]}