<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>T:DM</title>
  
  <subtitle>feedId:60275609228025856+userId:56517623520646144</subtitle>
  <link href="http://mietl.github.io/atom.xml" rel="self"/>
  
  <link href="http://mietl.github.io/"/>
  <updated>2024-10-28T11:39:20.885Z</updated>
  <id>http://mietl.github.io/</id>
  
  <author>
    <name>mietl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MacOS记录</title>
    <link href="http://mietl.github.io/2024/08/26/macos/macos-wiki/"/>
    <id>http://mietl.github.io/2024/08/26/macos/macos-wiki/</id>
    <published>2024-08-26T11:30:02.000Z</published>
    <updated>2024-10-28T11:39:20.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="允许安装任意来源的-App"><a href="#允许安装任意来源的-App" class="headerlink" title="允许安装任意来源的 App"></a>允许安装任意来源的 App</h3><p>MacOS 15之前版本终端执行以下命令   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo spctl --master-disable<br></code></pre></td></tr></table></figure><p>MacOS 15 开启任何来源</p><ol><li>下载描述文件  <a href="http://mietl.github.io/files/anysource.mobileconfig">AnySource.mobileconfig</a>    </li><li>双击安装描述文件</li></ol><h2 id="我的-App"><a href="#我的-App" class="headerlink" title="我的 App"></a>我的 App</h2><ul><li>App Cleaner &amp; Uninstaller.app 卸载软件   </li><li>Beyond Compare 好用的文件对比工具   </li><li>Bob 翻译工具    </li><li><a href="https://openai.com/chatgpt/">ChatGPT</a> </li><li><a href="https://github.com/huggingface/chat-macOS">HuggingChat</a></li><li>Cork Homebrew 管理</li><li>One Switch 擦屏幕的时候，里面的锁定键盘很有用</li><li>小青账 支持android&#x2F;ios 经常用电脑，所以喜欢在电脑上记账</li><li>Perplexity  使用 ai 搜索内容</li></ul><h3 id="📖-阅读"><a href="#📖-阅读" class="headerlink" title="📖 阅读"></a>📖 阅读</h3><ul><li>Skim 简单的PDF阅读 </li><li><a href="https://arc.net/">Arc</a> 好看实用浏览器<br><code>brew install --cask arc</code></li><li><del><a href="https://github.com/Ranchero-Software/NetNewsWire">NetNewsWire</a>  开源免费的 RSS 阅读器</del><br><code>brew install --cask netnewswire</code></li><li><a href="https://follow.is/">Follow</a> 下一代信息浏览器。</li></ul><h3 id="🔨-开发"><a href="#🔨-开发" class="headerlink" title="🔨 开发"></a>🔨 开发</h3><ul><li><a href="https://www.jetbrains.com/toolbox-app/">JetBrains Toolbox</a>  管理JetBrains系列软件，更新   </li><li><a href="https://orbstack.dev/">OrbStack</a>  相比 Docker Desktop，更轻便且更高效， 内存占用更小<br>  <code>brew install orbstack</code></li><li><a href="https://www.warp.dev/">Warp</a><br>  <code>brew install --cask warp</code></li><li><a href="https://zed.dev/">Zed</a>    </li><li><a href="https://www.cursor.com/">Cursor</a> </li><li>Google Chrome<br>浏览器插件<br><a href="https://microsoftedge.microsoft.com/addons/detail/cfpdbfmncaampihkmejogihjkenkonbn?hl=zh-CN">codebox</a></li><li><a href="https://code.visualstudio.com/Download">Visual Studio Code</a><br>  主题推荐 <a href="https://marketplace.visualstudio.com/items?itemName=iwyvi.chinolor">Chinolor Theme</a><br>  查看当前安装扩展 <code>bash code --list-extensions</code></li><li>Android Studio 开发移动端App<br>  主题推荐  Mariana Pro Theme 和 我喜欢的配色方案 <a href="http://mietl.github.io/files/chinolor.icls">Chinolor.icls</a>    </li><li><del>Fleet</del></li><li><a href="https://gitbutler.com/">GitButler</a>   </li><li><a href="http://www.usebruno.com/">Bruno</a>  - 开源 IDE，测试 API工具。</li><li>DevToys 开发者的瑞士军刀， 里面的智能检测 根据剪贴板内容自动检测最佳工具，我觉得很赞</li><li>Proxyman 抓包工具</li><li>彩虹工具箱 一些小工具</li><li>CodeEdit 原生开发的编辑器</li></ul><h3 id="📝-笔记"><a href="#📝-笔记" class="headerlink" title="📝 笔记"></a>📝 笔记</h3><ul><li><a href="https://anytype.io/">Anytype</a>  自由的笔记软件   </li><li>Typora markdown笔记软件<br>我正在使用的主题 <a href="https://github.com/theme-nexmoe/typora-theme-nexmoe?tab=readme-ov-file">typora-theme-nexmoe</a></li></ul><h3 id="🎵-音乐"><a href="#🎵-音乐" class="headerlink" title="🎵  音乐"></a>🎵  音乐</h3><ul><li>NeteaseMusic   开始emo，都给我😭</li><li><a href="https://open.spotify.com/">Spotify</a>&#x2F;<a href="spotube.krtirtho.dev">Spotube</a></li></ul><h3 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h3><ul><li><a href="https://wouter01.github.io/MediaMate/">MediaMate</a>  不一样的 音量、亮度和正在播放的效果，很好看🤩   </li><li><a href="https://d.keka.io/">Keka</a> 开源，可爱的压缩软件<br>  <code>brew install --cask keka </code></li><li><a href="https://github.com/MrKai77/Loop">Loop</a> 最好用的窗口管理工具，丝滑   </li><li><a href="https://github.com/Caldis/Mos">Mos</a>  开源 让鼠标平滑，反向滚动   </li><li>Proxifier  全局代理  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 激活码</span><br><span class="hljs-comment"># V2</span><br>P427L-9Y552-5433E-8DSR3-58Z68<br><span class="hljs-comment"># V3</span><br>3CWNN-WYTP4-SD83W-ASDFR-84KEA<br></code></pre></td></tr></table></figure></li><li>SoundSource 声音控制软件，可以控制单个应用声音大小    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 激活码   </span><br>Your Name:  Pertim Macwk   <br>Your Code:  ZLAT-QXP9-K3DW-K2UH-2WX9-96NH-3KPJ-NDY6-DC9D<br></code></pre></td></tr></table></figure></li><li><a href="https://z.weixin.qq.com/">微信输入法</a> 简洁的输入法， 支持跨设备(手机&#x2F;电脑)复制粘贴</li><li>iPreview - 强大的快捷预览扩展程序   </li><li>Caffeinated  防休眠应用</li><li><a href="https://github.com/ejbills/DockDoor">DockDoor</a> 类似windows预览窗口<br><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://mietl.github.io/images/macos/dockPeek1920.png" alt="dockPeek" data-caption="dockPeek" loading="lazy"></li></ul><h3 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h3><ul><li>Shadowrocket 翻墙    </li><li>DockX 显示网速，CPU，内存，温度，时钟，日期，动图</li><li>Dropover </li><li><a href="https://apps.apple.com/us/app/flow-focus-pomodoro-timer/id1423210932">Flow</a> - 番茄工作法 &amp; 专注计时器   </li><li><a href="https://inputsource.pro/zh-CN">Input Source Pro</a>  自动切换输入法，根据不同应用、不同网站，自动切换<br>  <code>brew install --cask input-source-pro</code></li><li><a href="https://www.mowglii.com/itsycal/">Itsycal</a>  小巧的菜单栏日历  <code>&#39;TT&#39;MMd-e</code></li><li><a href="https://max.codes/latest">Latest</a>  检查软件哪些软件更新   </li><li>MagicNotch 菜单栏刘海，快捷按钮操作  </li><li><a href="https://marta.sh/">Marta</a>  - 双窗格文件管理<br>  <code>brew install --cask marta</code></li><li>Windows App 远程 windows电脑   </li><li>Mochi Diffusion   </li><li><a href="https://www.ollama.com/">Ollama</a>  - 本地大模型   </li><li><a href="https://github.com/kevinhermawan/Ollamac">Ollamac</a>  原生开发的Ollama应用聊天界面   </li><li>Parallels Desktop  Mac最好的虚拟机软件   </li><li>PasteNow  好用的剪贴板工具   </li><li>PictureView 免费的图片浏览工具</li><li>QuickRecorder  开源的录屏软件<br>  <code>brew install lihaoyun6/tap/quickrecorder </code></li><li><a href="https://www.raycast.com/">Raycast</a> 应用快捷启动器、 支持很多扩展 、 剪贴板、窗口管理等<br>  <code>brew install --cask raycast </code></li><li>Riffo 通过 AI 重命名文件名   </li><li><a href="https://github.com/Tencent/lemon-cleaner">Tencent Lemon</a>  腾讯开源的Mac清理工具   <!-- - Things3  好看的任务清单ToDo软件 --></li><li>Microsoft To Do 待办事项<!-- - [Reminders MenuBar](https://github.com/DamascenoRafael/reminders-menubar) + Apple 提醒事项 --></li><li>ToDesk 远程控制工具   </li><li><a href="https://apps.apple.com/cn/app/xnip-%E6%88%AA%E5%9B%BE-%E6%A0%87%E6%B3%A8/id1221250572?mt=12">Xnip</a> 免费的截图软件，支持长截图，好看   </li><li><a href="https://github.com/mulaRahul/keyviz">keyviz</a> 在屏幕上显示，你正在按下的键   </li><li><a href="https://github.com/localsend/localsend">LocalSend</a> 免费、开源、跨平台 文件共享到附近的设备</li></ul><h3 id="视频-📺"><a href="#视频-📺" class="headerlink" title="视频 📺"></a>视频 📺</h3><ul><li><a href="https://iina.io/">IINA</a> 开源好用的视频播放器<br>  <code>brew install --cask iina </code></li><li>哔哩哔哩</li></ul><h3 id="社交-💬"><a href="#社交-💬" class="headerlink" title="社交 💬"></a>社交 💬</h3><ul><li><a href="https://mac.weixin.qq.com/">WeChat</a>  聊天   </li><li>Mimestream  好用的Gmail邮箱</li><li>Discord<br>  <code>brew install --cask discord </code></li><li>Telegram </li><li>TencentMeeting - 腾讯会议 开会讨论   </li><li>Maipo  微博 Mac 客户端</li></ul><h3 id="编程字体"><a href="#编程字体" class="headerlink" title="编程字体"></a>编程字体</h3><p><a href="https://github.com/tonsky/FiraCode">FiraCode</a></p><h2 id="破解站"><a href="#破解站" class="headerlink" title="破解站"></a>破解站</h2><ul><li><a href="https://appstorrent.ru/">appstorrent</a>    </li><li><a href="https://xmac.app/app/">xmac</a></li></ul><h3 id="Mac书签"><a href="#Mac书签" class="headerlink" title="Mac书签"></a>Mac书签</h3><ul><li><a href="https://juejin.cn/post/7292428123849293887">2023年🧑‍💻工程师的 Mac 工具箱2023年工程师必备的 Mac 软件清单 &#x2F; 订阅技巧分享，帮助你提高生产力 - 掘金</a>   </li><li><a href="https://44maker.github.io/wiki/Mac/index.html">终极配置教程</a></li></ul><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="https://github.com/corpnewt/gibMacOS">GitHub - corpnewt&#x2F;gibMacOS: Py2&#x2F;py3 script that can download macOS components direct from Apple</a>    </li><li><a href="https://qiuchenlyopensource.github.io/Documentaions/starter-topic.html">Mac软件注入 | InjectLib</a></li></ul><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>  <kbd>command</kbd> + <kbd>option</kbd> + <kbd>x</kbd> 剪贴文件 </p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ol><li>访达 <kbd>command</kbd> 键 + 拖动软件 可以将软件图标添加到访达顶部，快捷使用<br> <img onerror="imgOnError(this);" data-fancybox="gallery" src="http://mietl.github.io/images/macos/top_icon.png" alt="image.png" data-caption="image.png" loading="lazy">    </li><li><kbd>option</kbd> 键  + 拖动访达窗口大小，可以记录窗口大小，下次打开&#x2F;新建窗口时，还是之前拖动的大小   </li><li>在 ~&#x2F;Users&#x2F; 用户名下 创建 <strong>Developer</strong> 目录,系统会自动添加锤子图标，你可以将他添加到边栏<br>  <img onerror="imgOnError(this);" data-fancybox="gallery" src="http://mietl.github.io/images/macos/developer.png" alt="developer.png" data-caption="developer.png" loading="lazy"> </li><li>长按 <kbd>option</kbd> 键后 点击日期，可以打开勿扰模式<br> <img onerror="imgOnError(this);" data-fancybox="gallery" src="http://mietl.github.io/images/macos/menubar.jpg" alt="menubar.png" data-caption="menubar.png" loading="lazy"></li><li>终端代理 <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 1082 为代理端口号，替换成你代理软件的端口 </span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">https_proxy</span>=http://127.0.0.1:1082;<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">http_proxy</span>=http://127.0.0.1:1082;<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">all_proxy</span>=socks5://127.0.0.1:1082;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设置&quot;&gt;&lt;a href=&quot;#设置&quot; class=&quot;headerlink&quot; title=&quot;设置&quot;&gt;&lt;/a&gt;设置&lt;/h2&gt;&lt;h3 id=&quot;允许安装任意来源的-App&quot;&gt;&lt;a href=&quot;#允许安装任意来源的-App&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="MacOS" scheme="http://mietl.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>pnpm包管理</title>
    <link href="http://mietl.github.io/2024/01/10/tools/pnpm/"/>
    <id>http://mietl.github.io/2024/01/10/tools/pnpm/</id>
    <published>2024-01-10T15:25:27.000Z</published>
    <updated>2024-10-28T11:39:20.885Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pnpm.io/">pnpm官网</a><br>快速、节省磁盘空间的软件包管理器</p><h2 id="pnpm是如何节省磁盘空间"><a href="#pnpm是如何节省磁盘空间" class="headerlink" title="pnpm是如何节省磁盘空间"></a>pnpm是如何节省磁盘空间</h2><p>使用pnpm安装依赖后，依赖会被存储在硬盘的某一位置，<br>当其他项目在安装依赖时，如果依赖版本存在，包里的文件将被硬链接到该项目、从而不会占用额外的磁盘空间，同时安装速度也得到了提升</p><h4 id="硬链接-hard-link"><a href="#硬链接-hard-link" class="headerlink" title="硬链接(hard link)"></a>硬链接(hard link)</h4><p>在操作系统的文件系统中，多个文件共同使用同一块存储单元   </p><!-- 路径一 project1路径二 project2/node_modules --><p>在使用硬链接的文件时，当修改了路径二中的文件内容时，路径一的文件也随之改变、它们使用的是磁盘中同一块数据  </p><h4 id="软链接-soft-link"><a href="#软链接-soft-link" class="headerlink" title="软链接(soft link)"></a>软链接(soft link)</h4><p>通过符号链接到文件存储位置，指向其他文件的引用，例如快捷方式   </p><h4 id="如何创建硬链接"><a href="#如何创建硬链接" class="headerlink" title="如何创建硬链接"></a>如何创建硬链接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># macos </span><br><span class="hljs-built_in">ln</span> test.js test_hard.js<br><br><span class="hljs-comment"># windows </span><br>mklink /H test.js test_hard.js<br></code></pre></td></tr></table></figure><blockquote><p>这与拷贝文件不同的是，拷贝文件会占用一定的存储空间，它们在磁盘上分别占据不同的空间</p></blockquote><h4 id="如何创建软链接"><a href="#如何创建软链接" class="headerlink" title="如何创建软链接"></a>如何创建软链接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># macos </span><br><span class="hljs-built_in">ln</span> -s test.js test_soft.js<br><br><span class="hljs-comment"># windows </span><br>mklink  test.js test_soft.js<br></code></pre></td></tr></table></figure><blockquote><p>删除源文件后，这个链接就失效了，无法找到引用文件</p></blockquote><h2 id="提高安装速度"><a href="#提高安装速度" class="headerlink" title="提高安装速度"></a>提高安装速度</h2><h3 id="非扁平的-node-modules-目录"><a href="#非扁平的-node-modules-目录" class="headerlink" title="非扁平的 node_modules 目录"></a>非扁平的 node_modules 目录</h3><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://mietl.github.io/images/tools/pnpm/node_modules.png" alt="node_modules" data-caption="node_modules" loading="lazy"><br>解决幽灵依赖问题</p><p>通过npm 或 yarn 安装依赖时，所有包都会存放在node_modules下<br>这就导致 Node.js 模块查找策略，你的代码中可以直接访问能找到这些不属于当前项目package.json的依赖包</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://pnpm.io/installation">installation</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># npm 全局安装</span><br>npm install -g pnpm<br><br><span class="hljs-comment"># macos brew</span><br>brew install pnpm<br></code></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装package.json中的依赖</span><br>pnpm install<br><br><span class="hljs-comment"># 添加依赖包</span><br>pnpm add<br><br><span class="hljs-comment"># 删除依赖包</span><br>pnpm remove <br><br><span class="hljs-comment"># 执行命令</span><br>pnpm xxx<br><br><span class="hljs-comment"># 查看包仓库存储位置</span><br>pnpm store path<br><span class="hljs-comment"># &gt; /Users/mietl/Library/pnpm/store/v3</span><br></code></pre></td></tr></table></figure><blockquote><p>当pnpm store文件夹越来越大时，可以通过 <code> pnpm store prune</code> 来删除一些未被引用的包，释放空间</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://pnpm.io/&quot;&gt;pnpm官网&lt;/a&gt;&lt;br&gt;快速、节省磁盘空间的软件包管理器&lt;/p&gt;
&lt;h2 id=&quot;pnpm是如何节省磁盘空间&quot;&gt;&lt;a href=&quot;#pnpm是如何节省磁盘空间&quot; class=&quot;headerlink&quot; title=&quot;p</summary>
      
    
    
    
    <category term="Tools" scheme="http://mietl.github.io/categories/Tools/"/>
    
    
    <category term="pnpm" scheme="http://mietl.github.io/tags/pnpm/"/>
    
    <category term="包管理" scheme="http://mietl.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Git started</title>
    <link href="http://mietl.github.io/2023/11/21/git/git-started/"/>
    <id>http://mietl.github.io/2023/11/21/git/git-started/</id>
    <published>2023-11-21T08:30:08.000Z</published>
    <updated>2024-10-28T11:39:20.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-started"><a href="#Git-started" class="headerlink" title="Git started"></a>Git started</h1><p>Git 学习</p><h2 id="如何开始使用-Git"><a href="#如何开始使用-Git" class="headerlink" title="如何开始使用 Git"></a>如何开始使用 Git</h2><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>当你要做一些提交时，git 需要知道你是谁，因此你需要配置用户名和邮件地址，他会作为你的提交人信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置用户名</span><br>git config --global user.name <span class="hljs-string">&quot;mietl&quot;</span> <br><span class="hljs-comment"># 设置你的邮箱</span><br>git config --global user.email <span class="hljs-string">&quot;mietl.moe@icolud.com&quot;</span> <br></code></pre></td></tr></table></figure><p>使用<code>—global</code>选项后、他将保存到你的系统中，你只需要执行一次。</p><p>添加后你可以使用 <code>git config --list </code>进行查看，你也可以在其他地方配置获取查看他们</p><ul><li><strong>&#x2F;etc&#x2F;.gitconfig</strong><br>系统上所有用户的通用配置 使用 <code>git config </code> 命令时添加<code>—system</code>选项，他会读写这个文件</li><li><strong>.git&#x2F;.gitconfig</strong><br>当前仓库的 .<code>git</code>目录 ,用于当前仓库配置</li><li><strong>~&#x2F;.gitconfig</strong><br>当前用户的 git 配置，操作系统是多用户的,传递<code> —local</code>选项，读写此文件</li></ul><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>通过<code>git init </code>初始化一个仓库用来管理当前项目, 执行后，当前目录下会创建.git 隐藏文件夹。</p><p>默认情况下 git 并不会将你的文件添加到 Git 仓库中，当前仓库还是只是一个空仓库，项目中的文件还未被跟踪，因此你需要手动添加。</p><p>你可以通过<code>git add index.js </code> 来跟踪某个文件的 他会被添加到暂缓区。</p><blockquote><p>暂缓区你可以理解为一个临时放东西的区域</p></blockquote><p>如果你跟踪了某个文件，修改后需要重新添加到<code>暂缓区</code>中 可以使用<code>git add . </code>将所有文件添加到<code>暂缓区</code>中</p><p>对于已经存在的仓库，通过 <code>git clone</code>命令 它会将完整的仓库克隆过来包含历史提交记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/meitl.git<br></code></pre></td></tr></table></figure><h4 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h4><p>已跟踪的文件，具有不同状态</p><ul><li><code>staged</code> 已经添加到暂缓区了</li><li><code>unmodified</code> 未更改的</li><li><code>modifed</code> 修改文件后的状态</li></ul><p>通过 <code>git status</code> 查看文件状态</p><p><img src="http://mietl.github.io/images/git/status.jpg"></p><blockquote><p>Untracked files 表示未跟踪的文件</p></blockquote><p>查看更简洁的状态信息</p><p><code>git status —short</code> 也可以将<code>short</code> 简写为<code>-s </code></p><hr><h4 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h4><p>如果你不希望某些文件被上传，创建 <code>.gitignore</code>文件<br>定义一些排除规则，该文件指定的文件或者目录，将不会被 git 跟踪</p><h4 id="文件提交"><a href="#文件提交" class="headerlink" title="文件提交"></a>文件提交</h4><p>将把文件都提交到暂缓区后，通过<code>git commit 命令进行</code>提交，添加 -m 参数 添加你本次提交到信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;hhhh&quot;</span><br></code></pre></td></tr></table></figure><p>通-a 参数可以将所有文件添加到暂存区中省略<code>git add .</code>的步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -a -m <span class="hljs-string">&quot;提交说明&quot;</span><br></code></pre></td></tr></table></figure><hr><h4 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h4><p>使用 <code>git log</code> 他会列出所有的历史提交信息<br>包含 SHA-1 校验和(每次提交的唯一标识)、作者的名字和电子邮件地址、提交时间以及提交说明</p><p>查看更加直观的信息<code>git log --pretty=oneline</code><br>当存在分支 <code>git log --pretty=oneline --grap</code> 更易于查看</p><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><p>HEAD 是当前分支的指针，他记录着当前处于的版本<br>默认他指向该分支的最后一次提交，你可以通过修改他</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --hard HEAD^  // ^上一版本  ^^上一个版本的前一个版本<br><br>git reset --hard HEAD~n   // 回退至前多少次版本<br><br>git reset --hard 7256f72b  // 指定回退至某次提交 commitId;<br></code></pre></td></tr></table></figure><h4 id="远程仓库验证"><a href="#远程仓库验证" class="headerlink" title="远程仓库验证"></a>远程仓库验证</h4><p>你可以通过两种方式对远程仓库进行连接</p><p>当需要对私有仓库进行操作时，Git 服务器需要知道你是谁</p><ol><li>通过 SSH 密钥验证</li></ol><p>通过执行命令生成公钥和私钥</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ssh-keygen -t ed25519 -C “you email<span class="hljs-string">&quot;       // 通过-C添加注释</span><br></code></pre></td></tr></table></figure><p>你也可以采用不同的加密方式 ，只要 Git 服务器支持</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ssh-keygen -t rsa -b <span class="hljs-number">2048</span> -C “hhh<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>生成后在你用户文件(&#x2F;Users&#x2F;用户名&#x2F;.ssh)下会产生.ssh 隐藏目录</p><p><img src="http://mietl.github.io/images/git/ssh.jpg"></p><p>后缀名.pub 为公钥文件，将内容配置到 Git 服务器中<br><img src="http://mietl.github.io/images/git/ssh_key.png"></p><p>配置后，在进行提交时，Git 会读取你的私钥文件，与你的帐户配置公钥进行验证。</p><h4 id="与远程仓库建立连接"><a href="#与远程仓库建立连接" class="headerlink" title="与远程仓库建立连接"></a>与远程仓库建立连接</h4><p>默认情况下通过 git clone 命令下载的代码，是已经与远程仓库进行连接的</p><p>当你初始化一个仓库时，如果你需要管理远程仓库</p><p>添加远程地址，让本地仓库和远程仓库建立连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add &lt;name&gt; &lt;url&gt;<br>git remote add origin  https://github.com/mietl/TBlog.git<br></code></pre></td></tr></table></figure><p>添加后 通过<code>git remove</code> 命令查看当前建立的远程连接地址<br>使用<code>-v</code>参数 可以查看更详细的信息<br><img src="http://mietl.github.io/images/git/remote_v.jpg"></p><p>重命名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote rename origin blog<br></code></pre></td></tr></table></figure><p>删除远程地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote remove blog<br></code></pre></td></tr></table></figure><h4 id="Git-标签"><a href="#Git-标签" class="headerlink" title="Git 标签"></a>Git 标签</h4><p>当提交历史过多时，如果你想快速找到历史提交中的某次重要版本，你可以为他添加标签</p><p>创建标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git tag v1.0.0<br></code></pre></td></tr></table></figure><p>在标签上添加一些附注信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git tag -a v1.0.1 -m <span class="hljs-string">&#x27;fixes&#x27;</span><br></code></pre></td></tr></table></figure><p>将标签上传到远程创建中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin v1.0.0<br></code></pre></td></tr></table></figure><p>上传所有 tags</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin --tags<br></code></pre></td></tr></table></figure><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><ol><li>问题一: 本地分支的上游分支（跟踪分支）</li></ol><p><strong>重现步骤</strong></p><p>在使用<code>git init</code>创建本地仓库后，添加远程仓库连接后<br>执行<code>git pull</code>命令时，会产生<br><img src="http://mietl.github.io/images/git/issue1.png"></p><blockquote><p>git pull 是 git fetch 与 git merge 的结合</p></blockquote><p>原因是<code>git pull 在执行 merge</code>的过程中，由于 Git 存在分支的概念，他并不知道你要合并那条分支<br>你可以明确指定 <code>git pull origin main</code> 具体要合并的分支，但这样在进行 push 操作时也需要明确指定</p><p>你可能会觉得太麻烦，提示中还有另外一个解决方案。</p><p>你可以通过执行下面命令设置本地分支与远程分支的跟踪关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch --set-upstream-to=origin/main main<br><span class="hljs-comment"># 最后 main可以省略，默认他会设置当前所在的分支</span><br></code></pre></td></tr></table></figure><p>将当前分支指定上游分支 为远程的 main 分支，指定后 Git 就能知道跟踪是那条分支</p><ol start="2"><li>问题二: 拒绝合并不相干的提交历史 *<em>重现步骤</em><br>通过 Git 服务器创建好远程仓库，添加 README.md 后，<br>创建本地仓库连接远程服务器，合并远程服务器上的 README.md 文件会产生<br><img src="http://mietl.github.io/images/git/issue2.jpg"></li></ol><p>在执行<code>git merge</code>命令时，如果你的远程仓库有提交历史了(已经存在文件了)</p><p>产生原因: Git 默认不允许两个不相干历史进行合并、（没有同一个基础分支历史）<br>如果你依旧想进行合并 添加<code>allow-unrelated-histories</code>参数 来允许提交不相关的提交历史</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git merge --allow-unrelated-histories<br></code></pre></td></tr></table></figure><p>参考链接 <a href="https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories-on-rebase">https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories-on-rebase</a></p><blockquote><p>如果你通过 git clone 项目进行操作的话，可以绕过问题 1 和问题 2，git clone 默认会存在上游分支，克隆下来也存在相关历史</p></blockquote><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ol><li>命名别名 <code>git config —global alias.br branch</code></li></ol><h4 id="集中式版本控制与分布式版本控制的区别？"><a href="#集中式版本控制与分布式版本控制的区别？" class="headerlink" title="集中式版本控制与分布式版本控制的区别？"></a>集中式版本控制与分布式版本控制的区别？</h4><p><strong>集中式版本控制</strong>： 只在服务器中保存了代码提交的历史记录<br><strong>分布式版本控制</strong>： 客户端与服务器中都有保存完整的历史记录， 在进行克隆操作时会对仓库代码进行完整备份，包括历史记录</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git-started&quot;&gt;&lt;a href=&quot;#Git-started&quot; class=&quot;headerlink&quot; title=&quot;Git started&quot;&gt;&lt;/a&gt;Git started&lt;/h1&gt;&lt;p&gt;Git 学习&lt;/p&gt;
&lt;h2 id=&quot;如何开始使用-Git&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="Tools" scheme="http://mietl.github.io/categories/Tools/"/>
    
    
    <category term="Git" scheme="http://mietl.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git branch</title>
    <link href="http://mietl.github.io/2023/11/13/git/git-branch/"/>
    <id>http://mietl.github.io/2023/11/13/git/git-branch/</id>
    <published>2023-11-13T22:15:08.000Z</published>
    <updated>2024-10-28T11:39:20.885Z</updated>
    
    <content type="html"><![CDATA[<p>Git 分支学习</p><h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2><p>Git 的分支 是指向提交对象的可变指针</p><blockquote><p>HEAD 指向当前分支</p></blockquote><p>你可以创建多个分支，在不同分支上进行提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">t1 -&gt; t2  -&gt; t3 (main)<br><br>t1 -&gt; t2   (dev)<br></code></pre></td></tr></table></figure><p>可以很方便在不同的分支中进行开发</p><p><code>main</code> 分支，在进行每次提交后， 他都会指向最后一次提交对象，当你在 <code>mian</code> 分支中进行操作时，<code>dev</code> 不会受影响，<code>dev</code> 依然指向 <code>t2</code>不变</p><p>因此你也可以切换到 dev 中做不同事情</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">t1 -&gt; t2 -&gt; t4 (dev)<br></code></pre></td></tr></table></figure><p><strong>创建分支</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch dev<br></code></pre></td></tr></table></figure><p><strong>查看所有分支</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch<br></code></pre></td></tr></table></figure><p><strong>切换分支</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout dev<br></code></pre></td></tr></table></figure><p><strong>创建 dev 并切换到 dev 分支</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b dev<br></code></pre></td></tr></table></figure><p><strong>删除分支</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -d dev<br>git branch -D dev  // 强制删除<br></code></pre></td></tr></table></figure><p>查看当前分支与最后一次提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -v<br></code></pre></td></tr></table></figure><h2 id="分支的作用"><a href="#分支的作用" class="headerlink" title="分支的作用"></a>分支的作用</h2><p>例入在开发项目时，开发完小目标功能后，添加 <code>tag</code>进行标记 ，想进行新功能的开发，开发过程中，原先的 tag 版本出现问题，你就可以切换到 tag 版本创建分支完成修复。</p><p>修复后发布新版本，等新功能开发好后，使用 <code> git merge branch-name</code>进行合并</p><h2 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h2><p>远程分支也是一种分支结构，和普通的分支一样，只不过在远程</p><p>本地仓库与远程仓库建立连接后,设置上游分支后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch --set-upstream-to=origin/main<br></code></pre></td></tr></table></figure><p>错误 <strong><u>fatal: the requested upstream branch ‘origin&#x2F;main’ does not exist</u></strong></p><p><img src="http://mietl.github.io/images/git/fatal.png"></p><p>这是因为目前只是与远程仓库建立了的连接，远程仓库中有哪些分支还不知道</p><p>通过<code>git fetch</code>命令来获取最新的远程分支，</p><p><img src="http://mietl.github.io/images/git/fetch-branch.png"></p><p>这样本地就有 <code>origin/main</code> 的分支了</p><h4 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h4><p>在创建某个分支后，需要共享他时，通过 <code>git push &lt;remote&gt; &lt;branch&gt;</code>推送到远程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin dev<br></code></pre></td></tr></table></figure><h4 id="跟踪远程分支"><a href="#跟踪远程分支" class="headerlink" title="跟踪远程分支"></a><strong>跟踪远程分支</strong></h4><blockquote><p>当克隆一个仓库时，会自动创建一个跟踪了 origin&#x2F;main 的本地分支 main</p></blockquote><p>在你创建了本地分支 main 如果想跟踪远程分支，可以通过执行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git checkout --track <span class="hljs-tag">&lt;<span class="hljs-name">remote</span>&gt;</span>/<span class="hljs-tag">&lt;<span class="hljs-name">branch</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过<code>git clone</code> 下来项目时，本地分支中只会包含 main 分支，当想切换到其他远程分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout --track origin/test<br></code></pre></td></tr></table></figure><p>该命令执行后会先去查看远程有没有这个分支，有的话就创建一个本地 <code>test</code> 分支，并跟踪远程分支 <code>test</code> 同时切换到 <code>test</code> 分支。</p><p>你也可以直接省略 <code>--track </code>参数 直接切换到远程分支，作用时相同的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p><strong>删除远程分支</strong></p><p>当不需要远程的某个分支时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin --delete &lt;branch&gt;<br></code></pre></td></tr></table></figure><p>当初始化好本地仓库后，与远程建立连接，远程分支的分支名与本地分支不一致时</p><p>git pull 时拉取代码时，指定上游分支后，提后后</p><p>推送到远程仓库时,产生如下错误,</p><p>本地分支: master<br>远程分支: main</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://mietl.github.io/images/git/push-default.png" alt="path-default" data-caption="path-default" loading="lazy"></p><p>这个时候就会有疑问了，明明已经设置了上游分支，为什么还需要指定</p><p>这是由于 git push 推送时的默认行为 , 当 <code>push</code> 时会在远程寻找与本地分支同名的进行推送，没有找到就拒绝推送</p><p>常见的默认行为有一下几种，你可以通过配置来修改他</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">git config push.<span class="hljs-keyword">default</span> upstream<br></code></pre></td></tr></table></figure><p>推送到上游分支，修改后就能正常推送了</p><h4 id="push-default"><a href="#push-default" class="headerlink" title="push.default"></a>push.default</h4><ol><li><p>nothing<br>没有默认行为，除非明确给出了引用 <code>push origin/main</code>，否则拒绝推送</p></li><li><p>current<br>推送当前分支,到远程同名分支、如果不存在则创建</p></li><li><p>upstream<br>将当前分支推送到上游分支</p></li><li><p>simple (2.0 默认值)<br>将当前分支推送到远程具有相同名称的分支。</p></li></ol><p><a href="https://git-scm.com/docs/git-push#_configuration">参考链接</a></p><p>更常见的做法是通过 <code>git checkout --track mian </code> 来跟踪远程仓库</p><p>他会检查远程有没有 <code>main</code> 分支有的话，创建一个本地 <code>main</code> 分支，跟踪远程分支 <code>main</code>,再切换到 <code>main</code> 分支中</p><p>创建一个同名分支再进行操作，这样可以绕过不必要的麻烦。</p><h4 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h4><p>在合并不同分支的方式有两种 <code>git merge</code> 与 <code> git rebase</code></p><p>使用 <code>git rebase</code> 命令你可以将某一分支上的所有修改，移至另外一个分支上， 简单理解就是改变当前分支的<code>base </code></p><p>可以将其想象成在一个分支上的提交拿起来，然后放到另一个分支的最新提交上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout future<br><br>git rebase main<br></code></pre></td></tr></table></figure><p>执行<code>rebase</code>命令 首先会找到<code>future</code>与<code>main</code>分支的共同父提交，将从父提交到 future 分支的所有修改，存储为临时文件，</p><p>以分支 main 为基准，将分支<code>future</code>上的提交一个一个地拿起来，并逐个应用到分支 A 的最新提交上，产生一次<code>future</code>新提交；</p><p>最后回到目标分支 (main) 中进行合并</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">git checkout main<br><br>git merge future<br><br></code></pre></td></tr></table></figure><blockquote><p><strong>TIP:</strong> 当我们执行 <code>rebase</code> 操作时，是在要移动的分支中执行 <code>rebase</code>，而不是在目标分支上执行。</p></blockquote><h3 id="rebase-和-merge-的选择"><a href="#rebase-和-merge-的选择" class="headerlink" title="rebase 和 merge 的选择"></a>rebase 和 merge 的选择</h3><p>使用 rebase 与 merge 会产生不同的 Git 历史记录，该如何进行选择呢？</p><ul><li>使用 <code>git merge</code> 在合并分支时，会产生一次新的提交历史<br><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://mietl.github.io/images/git/merge.png" alt="merge" data-caption="merge" loading="lazy"></li><li>使用 <code>git rebase</code> 直接将另外一个分支的修改复制了过来，并不会产生新的提交，这使历史记录更为简洁，并保持线性<br><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://mietl.github.io/images/git/rebase.png" alt="rebase" data-caption="rebase" loading="lazy"></li></ul><p>你可以根据需要选择不同的合并方式</p><blockquote><p>不建议再主要工作的分支中，使用<code>rebase</code>命令，他会造成一些意外的更改记录</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Git 分支学习&lt;/p&gt;
&lt;h2 id=&quot;Git-分支&quot;&gt;&lt;a href=&quot;#Git-分支&quot; class=&quot;headerlink&quot; title=&quot;Git 分支&quot;&gt;&lt;/a&gt;Git 分支&lt;/h2&gt;&lt;p&gt;Git 的分支 是指向提交对象的可变指针&lt;/p&gt;
&lt;blockquote&gt;
</summary>
      
    
    
    
    <category term="Tools" scheme="http://mietl.github.io/categories/Tools/"/>
    
    
    <category term="Git" scheme="http://mietl.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>随想</title>
    <link href="http://mietl.github.io/2023/09/15/sui-xiang/"/>
    <id>http://mietl.github.io/2023/09/15/sui-xiang/</id>
    <published>2023-09-15T11:30:02.000Z</published>
    <updated>2024-10-28T11:39:20.885Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最近发生的事一"><a href="#最近发生的事一" class="headerlink" title="最近发生的事一"></a>最近发生的事一</h4><p><del>依然抱有幻想</del></p><h4 id="最近发生的事二"><a href="#最近发生的事二" class="headerlink" title="最近发生的事二"></a>最近发生的事二</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;最近发生的事一&quot;&gt;&lt;a href=&quot;#最近发生的事一&quot; class=&quot;headerlink&quot; title=&quot;最近发生的事一&quot;&gt;&lt;/a&gt;最近发生的事一&lt;/h4&gt;&lt;p&gt;&lt;del&gt;依然抱有幻想&lt;/del&gt;&lt;/p&gt;
&lt;h4 id=&quot;最近发生的事二&quot;&gt;&lt;a href=&quot;#最</summary>
      
    
    
    
    
    <category term="记录" scheme="http://mietl.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>
